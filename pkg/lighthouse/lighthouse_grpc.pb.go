// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lighthouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LighthouseServiceClient is the client API for LighthouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LighthouseServiceClient interface {
	Run(ctx context.Context, in *LighthouseRequest, opts ...grpc.CallOption) (*LighthouseResult, error)
}

type lighthouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLighthouseServiceClient(cc grpc.ClientConnInterface) LighthouseServiceClient {
	return &lighthouseServiceClient{cc}
}

func (c *lighthouseServiceClient) Run(ctx context.Context, in *LighthouseRequest, opts ...grpc.CallOption) (*LighthouseResult, error) {
	out := new(LighthouseResult)
	err := c.cc.Invoke(ctx, "/lighthouse.LighthouseService/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LighthouseServiceServer is the server API for LighthouseService service.
// All implementations must embed UnimplementedLighthouseServiceServer
// for forward compatibility
type LighthouseServiceServer interface {
	Run(context.Context, *LighthouseRequest) (*LighthouseResult, error)
	mustEmbedUnimplementedLighthouseServiceServer()
}

// UnimplementedLighthouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLighthouseServiceServer struct {
}

func (UnimplementedLighthouseServiceServer) Run(context.Context, *LighthouseRequest) (*LighthouseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedLighthouseServiceServer) mustEmbedUnimplementedLighthouseServiceServer() {}

// UnsafeLighthouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LighthouseServiceServer will
// result in compilation errors.
type UnsafeLighthouseServiceServer interface {
	mustEmbedUnimplementedLighthouseServiceServer()
}

func RegisterLighthouseServiceServer(s grpc.ServiceRegistrar, srv LighthouseServiceServer) {
	s.RegisterService(&_LighthouseService_serviceDesc, srv)
}

func _LighthouseService_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LighthouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LighthouseServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lighthouse.LighthouseService/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LighthouseServiceServer).Run(ctx, req.(*LighthouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LighthouseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lighthouse.LighthouseService",
	HandlerType: (*LighthouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _LighthouseService_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lighthouse.proto",
}
