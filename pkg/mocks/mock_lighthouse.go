// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/websu-io/websu/pkg/lighthouse (interfaces: LighthouseServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	lighthouse "github.com/websu-io/websu/pkg/lighthouse"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLighthouseServiceClient is a mock of LighthouseServiceClient interface
type MockLighthouseServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLighthouseServiceClientMockRecorder
}

// MockLighthouseServiceClientMockRecorder is the mock recorder for MockLighthouseServiceClient
type MockLighthouseServiceClientMockRecorder struct {
	mock *MockLighthouseServiceClient
}

// NewMockLighthouseServiceClient creates a new mock instance
func NewMockLighthouseServiceClient(ctrl *gomock.Controller) *MockLighthouseServiceClient {
	mock := &MockLighthouseServiceClient{ctrl: ctrl}
	mock.recorder = &MockLighthouseServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLighthouseServiceClient) EXPECT() *MockLighthouseServiceClientMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockLighthouseServiceClient) Run(arg0 context.Context, arg1 *lighthouse.LighthouseRequest, arg2 ...grpc.CallOption) (*lighthouse.LighthouseResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(*lighthouse.LighthouseResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockLighthouseServiceClientMockRecorder) Run(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockLighthouseServiceClient)(nil).Run), varargs...)
}
